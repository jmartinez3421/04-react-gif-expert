{"version":3,"sources":["components/addCategory/AddCategory.js","functions/getGifs.js","hooks/useFetchGifs.js","components/eraseButton/EraseButton.js","components/gifGridItem/GifGridItem.js","components/gifGrid/GifGrid.js","components/gifExpertApp/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","nuevaCategoria","target","placeholder","getGifs","category","a","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setstate","useEffect","then","imgs","EraseButton","onClick","arrayCategories","categoryPosition","indexOf","splice","GifGridItem","className","src","alt","GifGrid","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qMA8CeA,EA3CK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAElB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAsBA,OACI,sBAAMC,SAbW,SAACC,GAElBA,EAAEC,iBAEEJ,EAAWK,OAAOC,QAAU,IAC5BR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC7CN,EAAc,MAOlB,SAGI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SA3Bc,SAACP,GAEvB,IAAMQ,EAAiBR,EAAES,OAAOH,MAGhCR,EAAcU,IAuBNE,YAAY,uC,+BCnCfC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACJ,mCACTC,EAFa,iDAEmCF,EAFnC,6BACJ,oCADI,SAGAG,MAAMD,GAHN,cAGbE,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAKO,EAAIG,OAAOC,iBAAiBX,QAVtB,kBAcZK,GAdY,4CAAH,sDCwBLO,EArBM,SAACd,GAElB,MAA0BhB,mBAAS,CAC/BsB,KAAM,GACNS,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNnB,EAASC,GACJmB,MAAM,SAAAC,GACCH,EAAS,CACLX,KAAMc,EACNL,SAAS,SAG1B,CAACf,IAEGgB,GCAIK,EAlBK,SAAC,GAA2C,IAA1CrB,EAAyC,EAAzCA,SAAUjB,EAA+B,EAA/BA,cAAeS,EAAgB,EAAhBA,WAW3C,OACI,mCACI,wBAAQ8B,QAXI,WAChB,IAAMC,EAAe,YAAO/B,GACtBgC,EAAmBD,EAAgBE,QAAQzB,IACxB,IAAtBwB,GACCD,EAAgBG,OAAOF,EAAkB,GAE7CzC,GAAe,SAAAS,GAAU,OAAI+B,MAKzB,uBCHGI,EAVK,SAAC,GAAmB,EAAlBjB,GAAmB,IAAhBC,EAAe,EAAfA,MAAMT,EAAS,EAATA,IAE3B,OACI,sBAAK0B,UAAU,6CAAf,UACI,qBAAKC,IAAK3B,EAAK4B,IAAKnB,IACpB,4BAAIA,QCsBDoB,EAxBC,SAAC,GAA2C,IAA1C/B,EAAyC,EAAzCA,SAAUjB,EAA+B,EAA/BA,cAAeS,EAAgB,EAAhBA,WACvC,EAA+BsB,EAAad,GAAhCY,EAAZ,EAAON,KAAaS,EAApB,EAAoBA,QAEpB,OACI,sBAAKL,GAAIV,EAAT,UACI,6BAAKA,IAAc,+BAAM,cAAC,EAAD,CAAaA,SAAUA,EAAUR,WAAYA,EAAYT,cAAeA,MACjG,uBAECgC,GAAW,4CACZ,qBAAKa,UAAU,YAAf,SACI,6BACKhB,EAAOJ,KAAK,SAAAC,GACT,OAAO,cAAC,EAAD,eAECA,GADCA,EAAIC,eCetBsB,EA7BM,WAEjB,MAAoChD,mBAAS,CAAC,cAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAQA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGA,6BAEQS,EAAWgB,KAAI,SAAAR,GACX,OAAO,cAAC,EAAD,CAAwBA,SAAUA,EAAUR,WAAYA,EAAYT,cAAeA,GAArEiB,Y,MCjB7CiC,IAASC,OACL,cAAC,EAAD,IACCC,SAASC,eAAe,W","file":"static/js/main.dd9f7e06.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        //En el atributo target.value del evento se encuentra el valor del input\r\n        const nuevaCategoria = e.target.value;\r\n\r\n        //Actualizamos el useState con el valor introducido por el usuario\r\n        setInputValue(nuevaCategoria);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        //Con el método preventDefault evitamos que el navegador se recargue al realizar el submit\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length >= 2){\r\n            setCategories( categories => [inputValue, ...categories]);\r\n            setInputValue('');\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {/* Cada vez que haya un cambio en el input se lanzará el evento onChange, el value del input será el \r\n            valor del useState */}\r\n            <input \r\n                type=\"text\" \r\n                value={inputValue} \r\n                onChange={handleInputChange}\r\n                placeholder='¿Qué gifs quieres buscar?'\r\n            />\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","export const getGifs = async (category) => {\r\n    const apiKey = 'K4GZsweyjvoV3EsXT3XTLrx6E2OkRFja';\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=${apiKey}`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../functions/getGifs\";\r\n\r\nconst useFetchGifs = (category) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                    setstate({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });          \r\n            });\r\n    }, [category])\r\n\r\n    return state;\r\n\r\n}\r\n\r\nexport default useFetchGifs;","import React from 'react'\r\n\r\nconst EraseButton = ({category, setCategories, categories}) => {\r\n\r\n    const handleErase = () => {\r\n        const arrayCategories = [...categories];\r\n        const categoryPosition = arrayCategories.indexOf(category);\r\n        if(categoryPosition !== -1){\r\n            arrayCategories.splice(categoryPosition, 1);\r\n        }\r\n        setCategories( categories => arrayCategories );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <button onClick={handleErase}>Borrar</button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EraseButton;","import React from 'react'\r\n\r\nconst GifGridItem = ({id,title,url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDown\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem;","import React from 'react';\r\nimport useFetchGifs from '../../hooks/useFetchGifs';\r\nimport EraseButton from '../eraseButton/EraseButton';\r\nimport GifGridItem from '../gifGridItem/GifGridItem';\r\n\r\nconst GifGrid = ({category, setCategories, categories}) => {\r\n    const {data:images, loading} = useFetchGifs(category);       \r\n\r\n    return (\r\n        <div id={category}>\r\n            <h3>{category}</h3><span><EraseButton category={category} categories={categories} setCategories={setCategories}/></span>\r\n            <hr/>\r\n\r\n            {loading && <p>Cargando...</p>}\r\n            <div className='card-grid'>                \r\n                <ol>\r\n                    {images.map( img => {\r\n                        return <GifGridItem \r\n                            key={img.id} \r\n                            {...img}\r\n                        />\r\n                    })}\r\n                </ol>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default GifGrid;\r\n","import React, {useState} from 'react';\r\nimport AddCategory from '../addCategory/AddCategory';\r\nimport GifGrid from '../gifGrid/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Piece']);\r\n\r\n    // const handleAdd = () => {\r\n    //     /*Para agregar un nuevo elemento a un array del useState crearemos un nuevo array con [] y dentro de este \r\n    //     copiaremos el array del useState con ...categories y añadiremos el elemento que queramos detras de la ,*/\r\n    //     setCategories( [...categories, 'HunterXHunter']);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr></hr>\r\n\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => {\r\n                        return <GifGrid key={category} category={category} categories={categories} setCategories={setCategories} />;\r\n                    })\r\n                }\r\n                \r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport GifExpertApp from \"./components/gifExpertApp/GifExpertApp\";\r\n\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n    <GifExpertApp />\r\n    ,document.getElementById('root')\r\n);"],"sourceRoot":""}